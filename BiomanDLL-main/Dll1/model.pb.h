// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto
#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto;
class Activity;
class ActivityDefaultTypeInternal;
extern ActivityDefaultTypeInternal _Activity_default_instance_;
class BodyItem;
class BodyItemDefaultTypeInternal;
extern BodyItemDefaultTypeInternal _BodyItem_default_instance_;
class BodyPart;
class BodyPartDefaultTypeInternal;
extern BodyPartDefaultTypeInternal _BodyPart_default_instance_;
class Clothing;
class ClothingDefaultTypeInternal;
extern ClothingDefaultTypeInternal _Clothing_default_instance_;
class Environment;
class EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class Experiment;
class ExperimentDefaultTypeInternal;
extern ExperimentDefaultTypeInternal _Experiment_default_instance_;
class Fabric;
class FabricDefaultTypeInternal;
extern FabricDefaultTypeInternal _Fabric_default_instance_;
class StageModel;
class StageModelDefaultTypeInternal;
extern StageModelDefaultTypeInternal _StageModel_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Activity* Arena::CreateMaybeMessage<::Activity>(Arena*);
template<> ::BodyItem* Arena::CreateMaybeMessage<::BodyItem>(Arena*);
template<> ::BodyPart* Arena::CreateMaybeMessage<::BodyPart>(Arena*);
template<> ::Clothing* Arena::CreateMaybeMessage<::Clothing>(Arena*);
template<> ::Environment* Arena::CreateMaybeMessage<::Environment>(Arena*);
template<> ::Experiment* Arena::CreateMaybeMessage<::Experiment>(Arena*);
template<> ::Fabric* Arena::CreateMaybeMessage<::Fabric>(Arena*);
template<> ::StageModel* Arena::CreateMaybeMessage<::StageModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Fabric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fabric) */ {
 public:
  inline Fabric() : Fabric(nullptr) {}
  virtual ~Fabric();

  Fabric(const Fabric& from);
  Fabric(Fabric&& from) noexcept
    : Fabric() {
    *this = ::std::move(from);
  }

  inline Fabric& operator=(const Fabric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fabric& operator=(Fabric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fabric& default_instance();

  static inline const Fabric* internal_default_instance() {
    return reinterpret_cast<const Fabric*>(
               &_Fabric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fabric& a, Fabric& b) {
    a.Swap(&b);
  }
  inline void Swap(Fabric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fabric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fabric* New() const final {
    return CreateMaybeMessage<Fabric>(nullptr);
  }

  Fabric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fabric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fabric& from);
  void MergeFrom(const Fabric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fabric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fabric";
  }
  protected:
  explicit Fabric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kIdFieldNumber = 1,
    kRefFieldNumber = 3,
    kRfFieldNumber = 4,
    kIpFieldNumber = 5,
    kDensityFieldNumber = 6,
    kThincknessFieldNumber = 7,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float ref = 3;
  void clear_ref();
  float ref() const;
  void set_ref(float value);
  private:
  float _internal_ref() const;
  void _internal_set_ref(float value);
  public:

  // float rf = 4;
  void clear_rf();
  float rf() const;
  void set_rf(float value);
  private:
  float _internal_rf() const;
  void _internal_set_rf(float value);
  public:

  // int32 ip = 5;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float density = 6;
  void clear_density();
  float density() const;
  void set_density(float value);
  private:
  float _internal_density() const;
  void _internal_set_density(float value);
  public:

  // float thinckness = 7;
  void clear_thinckness();
  float thinckness() const;
  void set_thinckness(float value);
  private:
  float _internal_thinckness() const;
  void _internal_set_thinckness(float value);
  public:

  // @@protoc_insertion_point(class_scope:Fabric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float ref_;
  float rf_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  float density_;
  float thinckness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Clothing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Clothing) */ {
 public:
  inline Clothing() : Clothing(nullptr) {}
  virtual ~Clothing();

  Clothing(const Clothing& from);
  Clothing(Clothing&& from) noexcept
    : Clothing() {
    *this = ::std::move(from);
  }

  inline Clothing& operator=(const Clothing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clothing& operator=(Clothing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clothing& default_instance();

  static inline const Clothing* internal_default_instance() {
    return reinterpret_cast<const Clothing*>(
               &_Clothing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Clothing& a, Clothing& b) {
    a.Swap(&b);
  }
  inline void Swap(Clothing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Clothing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clothing* New() const final {
    return CreateMaybeMessage<Clothing>(nullptr);
  }

  Clothing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clothing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clothing& from);
  void MergeFrom(const Clothing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clothing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Clothing";
  }
  protected:
  explicit Clothing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFabricFieldNumber = 4,
    kHashFieldNumber = 2,
    kIdFieldNumber = 1,
    kCoveringFieldNumber = 3,
  };
  // repeated .Fabric fabric = 4;
  int fabric_size() const;
  private:
  int _internal_fabric_size() const;
  public:
  void clear_fabric();
  ::Fabric* mutable_fabric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Fabric >*
      mutable_fabric();
  private:
  const ::Fabric& _internal_fabric(int index) const;
  ::Fabric* _internal_add_fabric();
  public:
  const ::Fabric& fabric(int index) const;
  ::Fabric* add_fabric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Fabric >&
      fabric() const;

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 covering = 3;
  void clear_covering();
  ::PROTOBUF_NAMESPACE_ID::int32 covering() const;
  void set_covering(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_covering() const;
  void _internal_set_covering(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Clothing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Fabric > fabric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 covering_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Environment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Environment) */ {
 public:
  inline Environment() : Environment(nullptr) {}
  virtual ~Environment();

  Environment(const Environment& from);
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Environment& operator=(Environment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Environment& default_instance();

  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }
  inline void Swap(Environment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Environment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Environment* New() const final {
    return CreateMaybeMessage<Environment>(nullptr);
  }

  Environment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Environment";
  }
  protected:
  explicit Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kTypeEnvFieldNumber = 3,
    kIdFieldNumber = 1,
    kTemperatureInCelsiousFieldNumber = 4,
    kHumidityInPercentFieldNumber = 5,
    kWindVelocityFieldNumber = 6,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string typeEnv = 3;
  void clear_typeenv();
  const std::string& typeenv() const;
  void set_typeenv(const std::string& value);
  void set_typeenv(std::string&& value);
  void set_typeenv(const char* value);
  void set_typeenv(const char* value, size_t size);
  std::string* mutable_typeenv();
  std::string* release_typeenv();
  void set_allocated_typeenv(std::string* typeenv);
  private:
  const std::string& _internal_typeenv() const;
  void _internal_set_typeenv(const std::string& value);
  std::string* _internal_mutable_typeenv();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 temperatureInCelsious = 4;
  void clear_temperatureincelsious();
  ::PROTOBUF_NAMESPACE_ID::int32 temperatureincelsious() const;
  void set_temperatureincelsious(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temperatureincelsious() const;
  void _internal_set_temperatureincelsious(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 humidityInPercent = 5;
  void clear_humidityinpercent();
  ::PROTOBUF_NAMESPACE_ID::int32 humidityinpercent() const;
  void set_humidityinpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_humidityinpercent() const;
  void _internal_set_humidityinpercent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 windVelocity = 6;
  void clear_windvelocity();
  ::PROTOBUF_NAMESPACE_ID::int32 windvelocity() const;
  void set_windvelocity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_windvelocity() const;
  void _internal_set_windvelocity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Environment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typeenv_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 temperatureincelsious_;
  ::PROTOBUF_NAMESPACE_ID::int32 humidityinpercent_;
  ::PROTOBUF_NAMESPACE_ID::int32 windvelocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class BodyPart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BodyPart) */ {
 public:
  inline BodyPart() : BodyPart(nullptr) {}
  virtual ~BodyPart();

  BodyPart(const BodyPart& from);
  BodyPart(BodyPart&& from) noexcept
    : BodyPart() {
    *this = ::std::move(from);
  }

  inline BodyPart& operator=(const BodyPart& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyPart& operator=(BodyPart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BodyPart& default_instance();

  static inline const BodyPart* internal_default_instance() {
    return reinterpret_cast<const BodyPart*>(
               &_BodyPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BodyPart& a, BodyPart& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyPart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyPart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyPart* New() const final {
    return CreateMaybeMessage<BodyPart>(nullptr);
  }

  BodyPart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyPart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BodyPart& from);
  void MergeFrom(const BodyPart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyPart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BodyPart";
  }
  protected:
  explicit BodyPart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentFieldNumber = 1,
    kClothingFieldNumber = 2,
  };
  // repeated .Environment Environment = 1;
  int environment_size() const;
  private:
  int _internal_environment_size() const;
  public:
  void clear_environment();
  ::Environment* mutable_environment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Environment >*
      mutable_environment();
  private:
  const ::Environment& _internal_environment(int index) const;
  ::Environment* _internal_add_environment();
  public:
  const ::Environment& environment(int index) const;
  ::Environment* add_environment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Environment >&
      environment() const;

  // repeated .Clothing Clothing = 2;
  int clothing_size() const;
  private:
  int _internal_clothing_size() const;
  public:
  void clear_clothing();
  ::Clothing* mutable_clothing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clothing >*
      mutable_clothing();
  private:
  const ::Clothing& _internal_clothing(int index) const;
  ::Clothing* _internal_add_clothing();
  public:
  const ::Clothing& clothing(int index) const;
  ::Clothing* add_clothing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clothing >&
      clothing() const;

  // @@protoc_insertion_point(class_scope:BodyPart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Environment > environment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clothing > clothing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class BodyItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BodyItem) */ {
 public:
  inline BodyItem() : BodyItem(nullptr) {}
  virtual ~BodyItem();

  BodyItem(const BodyItem& from);
  BodyItem(BodyItem&& from) noexcept
    : BodyItem() {
    *this = ::std::move(from);
  }

  inline BodyItem& operator=(const BodyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyItem& operator=(BodyItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BodyItem& default_instance();

  static inline const BodyItem* internal_default_instance() {
    return reinterpret_cast<const BodyItem*>(
               &_BodyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BodyItem& a, BodyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyItem* New() const final {
    return CreateMaybeMessage<BodyItem>(nullptr);
  }

  BodyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BodyItem& from);
  void MergeFrom(const BodyItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BodyItem";
  }
  protected:
  explicit BodyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 3,
    kTorsoFieldNumber = 4,
    kArmRightFieldNumber = 5,
    kArmLeftFieldNumber = 6,
    kForeamRightFieldNumber = 7,
    kForeamLeftFieldNumber = 8,
    kHandRightFieldNumber = 9,
    kHandLeftFieldNumber = 10,
    kThingRightFieldNumber = 11,
    kThingLeftFieldNumber = 12,
    kCalfRightFieldNumber = 13,
    kCalfLeftFieldNumber = 14,
    kFootRightFieldNumber = 15,
    kFootLeftFieldNumber = 16,
    kHashFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .BodyPart head = 3;
  int head_size() const;
  private:
  int _internal_head_size() const;
  public:
  void clear_head();
  ::BodyPart* mutable_head(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_head();
  private:
  const ::BodyPart& _internal_head(int index) const;
  ::BodyPart* _internal_add_head();
  public:
  const ::BodyPart& head(int index) const;
  ::BodyPart* add_head();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      head() const;

  // repeated .BodyPart torso = 4;
  int torso_size() const;
  private:
  int _internal_torso_size() const;
  public:
  void clear_torso();
  ::BodyPart* mutable_torso(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_torso();
  private:
  const ::BodyPart& _internal_torso(int index) const;
  ::BodyPart* _internal_add_torso();
  public:
  const ::BodyPart& torso(int index) const;
  ::BodyPart* add_torso();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      torso() const;

  // repeated .BodyPart armRight = 5;
  int armright_size() const;
  private:
  int _internal_armright_size() const;
  public:
  void clear_armright();
  ::BodyPart* mutable_armright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_armright();
  private:
  const ::BodyPart& _internal_armright(int index) const;
  ::BodyPart* _internal_add_armright();
  public:
  const ::BodyPart& armright(int index) const;
  ::BodyPart* add_armright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      armright() const;

  // repeated .BodyPart armLeft = 6;
  int armleft_size() const;
  private:
  int _internal_armleft_size() const;
  public:
  void clear_armleft();
  ::BodyPart* mutable_armleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_armleft();
  private:
  const ::BodyPart& _internal_armleft(int index) const;
  ::BodyPart* _internal_add_armleft();
  public:
  const ::BodyPart& armleft(int index) const;
  ::BodyPart* add_armleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      armleft() const;

  // repeated .BodyPart foreamRight = 7;
  int foreamright_size() const;
  private:
  int _internal_foreamright_size() const;
  public:
  void clear_foreamright();
  ::BodyPart* mutable_foreamright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_foreamright();
  private:
  const ::BodyPart& _internal_foreamright(int index) const;
  ::BodyPart* _internal_add_foreamright();
  public:
  const ::BodyPart& foreamright(int index) const;
  ::BodyPart* add_foreamright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      foreamright() const;

  // repeated .BodyPart foreamLeft = 8;
  int foreamleft_size() const;
  private:
  int _internal_foreamleft_size() const;
  public:
  void clear_foreamleft();
  ::BodyPart* mutable_foreamleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_foreamleft();
  private:
  const ::BodyPart& _internal_foreamleft(int index) const;
  ::BodyPart* _internal_add_foreamleft();
  public:
  const ::BodyPart& foreamleft(int index) const;
  ::BodyPart* add_foreamleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      foreamleft() const;

  // repeated .BodyPart handRight = 9;
  int handright_size() const;
  private:
  int _internal_handright_size() const;
  public:
  void clear_handright();
  ::BodyPart* mutable_handright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_handright();
  private:
  const ::BodyPart& _internal_handright(int index) const;
  ::BodyPart* _internal_add_handright();
  public:
  const ::BodyPart& handright(int index) const;
  ::BodyPart* add_handright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      handright() const;

  // repeated .BodyPart handLeft = 10;
  int handleft_size() const;
  private:
  int _internal_handleft_size() const;
  public:
  void clear_handleft();
  ::BodyPart* mutable_handleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_handleft();
  private:
  const ::BodyPart& _internal_handleft(int index) const;
  ::BodyPart* _internal_add_handleft();
  public:
  const ::BodyPart& handleft(int index) const;
  ::BodyPart* add_handleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      handleft() const;

  // repeated .BodyPart thingRight = 11;
  int thingright_size() const;
  private:
  int _internal_thingright_size() const;
  public:
  void clear_thingright();
  ::BodyPart* mutable_thingright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_thingright();
  private:
  const ::BodyPart& _internal_thingright(int index) const;
  ::BodyPart* _internal_add_thingright();
  public:
  const ::BodyPart& thingright(int index) const;
  ::BodyPart* add_thingright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      thingright() const;

  // repeated .BodyPart thingLeft = 12;
  int thingleft_size() const;
  private:
  int _internal_thingleft_size() const;
  public:
  void clear_thingleft();
  ::BodyPart* mutable_thingleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_thingleft();
  private:
  const ::BodyPart& _internal_thingleft(int index) const;
  ::BodyPart* _internal_add_thingleft();
  public:
  const ::BodyPart& thingleft(int index) const;
  ::BodyPart* add_thingleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      thingleft() const;

  // repeated .BodyPart calfRight = 13;
  int calfright_size() const;
  private:
  int _internal_calfright_size() const;
  public:
  void clear_calfright();
  ::BodyPart* mutable_calfright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_calfright();
  private:
  const ::BodyPart& _internal_calfright(int index) const;
  ::BodyPart* _internal_add_calfright();
  public:
  const ::BodyPart& calfright(int index) const;
  ::BodyPart* add_calfright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      calfright() const;

  // repeated .BodyPart calfLeft = 14;
  int calfleft_size() const;
  private:
  int _internal_calfleft_size() const;
  public:
  void clear_calfleft();
  ::BodyPart* mutable_calfleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_calfleft();
  private:
  const ::BodyPart& _internal_calfleft(int index) const;
  ::BodyPart* _internal_add_calfleft();
  public:
  const ::BodyPart& calfleft(int index) const;
  ::BodyPart* add_calfleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      calfleft() const;

  // repeated .BodyPart footRight = 15;
  int footright_size() const;
  private:
  int _internal_footright_size() const;
  public:
  void clear_footright();
  ::BodyPart* mutable_footright(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_footright();
  private:
  const ::BodyPart& _internal_footright(int index) const;
  ::BodyPart* _internal_add_footright();
  public:
  const ::BodyPart& footright(int index) const;
  ::BodyPart* add_footright();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      footright() const;

  // repeated .BodyPart footLeft = 16;
  int footleft_size() const;
  private:
  int _internal_footleft_size() const;
  public:
  void clear_footleft();
  ::BodyPart* mutable_footleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
      mutable_footleft();
  private:
  const ::BodyPart& _internal_footleft(int index) const;
  ::BodyPart* _internal_add_footleft();
  public:
  const ::BodyPart& footleft(int index) const;
  ::BodyPart* add_footleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
      footleft() const;

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BodyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > head_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > torso_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > armright_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > armleft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > foreamright_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > foreamleft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > handright_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > handleft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > thingright_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > thingleft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > calfright_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > calfleft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > footright_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart > footleft_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Activity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Activity) */ {
 public:
  inline Activity() : Activity(nullptr) {}
  virtual ~Activity();

  Activity(const Activity& from);
  Activity(Activity&& from) noexcept
    : Activity() {
    *this = ::std::move(from);
  }

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Activity& operator=(Activity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Activity& default_instance();

  static inline const Activity* internal_default_instance() {
    return reinterpret_cast<const Activity*>(
               &_Activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Activity& a, Activity& b) {
    a.Swap(&b);
  }
  inline void Swap(Activity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Activity* New() const final {
    return CreateMaybeMessage<Activity>(nullptr);
  }

  Activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Activity";
  }
  protected:
  explicit Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kTypeActivityFieldNumber = 5,
    kIdFieldNumber = 1,
    kIntensityInWattFieldNumber = 3,
    kDurationInMinutesFieldNumber = 4,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string typeActivity = 5;
  void clear_typeactivity();
  const std::string& typeactivity() const;
  void set_typeactivity(const std::string& value);
  void set_typeactivity(std::string&& value);
  void set_typeactivity(const char* value);
  void set_typeactivity(const char* value, size_t size);
  std::string* mutable_typeactivity();
  std::string* release_typeactivity();
  void set_allocated_typeactivity(std::string* typeactivity);
  private:
  const std::string& _internal_typeactivity() const;
  void _internal_set_typeactivity(const std::string& value);
  std::string* _internal_mutable_typeactivity();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 intensityInWatt = 3;
  void clear_intensityinwatt();
  ::PROTOBUF_NAMESPACE_ID::int32 intensityinwatt() const;
  void set_intensityinwatt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intensityinwatt() const;
  void _internal_set_intensityinwatt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 durationInMinutes = 4;
  void clear_durationinminutes();
  ::PROTOBUF_NAMESPACE_ID::int32 durationinminutes() const;
  void set_durationinminutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_durationinminutes() const;
  void _internal_set_durationinminutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typeactivity_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 intensityinwatt_;
  ::PROTOBUF_NAMESPACE_ID::int32 durationinminutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class StageModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StageModel) */ {
 public:
  inline StageModel() : StageModel(nullptr) {}
  virtual ~StageModel();

  StageModel(const StageModel& from);
  StageModel(StageModel&& from) noexcept
    : StageModel() {
    *this = ::std::move(from);
  }

  inline StageModel& operator=(const StageModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline StageModel& operator=(StageModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StageModel& default_instance();

  static inline const StageModel* internal_default_instance() {
    return reinterpret_cast<const StageModel*>(
               &_StageModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StageModel& a, StageModel& b) {
    a.Swap(&b);
  }
  inline void Swap(StageModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StageModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StageModel* New() const final {
    return CreateMaybeMessage<StageModel>(nullptr);
  }

  StageModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StageModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StageModel& from);
  void MergeFrom(const StageModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StageModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StageModel";
  }
  protected:
  explicit StageModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityFieldNumber = 4,
    kBodyFieldNumber = 5,
    kHashFieldNumber = 2,
    kTitleFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .Activity activity = 4;
  int activity_size() const;
  private:
  int _internal_activity_size() const;
  public:
  void clear_activity();
  ::Activity* mutable_activity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Activity >*
      mutable_activity();
  private:
  const ::Activity& _internal_activity(int index) const;
  ::Activity* _internal_add_activity();
  public:
  const ::Activity& activity(int index) const;
  ::Activity* add_activity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Activity >&
      activity() const;

  // repeated .BodyItem body = 5;
  int body_size() const;
  private:
  int _internal_body_size() const;
  public:
  void clear_body();
  ::BodyItem* mutable_body(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyItem >*
      mutable_body();
  private:
  const ::BodyItem& _internal_body(int index) const;
  ::BodyItem* _internal_add_body();
  public:
  const ::BodyItem& body(int index) const;
  ::BodyItem* add_body();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyItem >&
      body() const;

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:StageModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Activity > activity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyItem > body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Experiment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Experiment) */ {
 public:
  inline Experiment() : Experiment(nullptr) {}
  virtual ~Experiment();

  Experiment(const Experiment& from);
  Experiment(Experiment&& from) noexcept
    : Experiment() {
    *this = ::std::move(from);
  }

  inline Experiment& operator=(const Experiment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Experiment& operator=(Experiment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Experiment& default_instance();

  static inline const Experiment* internal_default_instance() {
    return reinterpret_cast<const Experiment*>(
               &_Experiment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Experiment& a, Experiment& b) {
    a.Swap(&b);
  }
  inline void Swap(Experiment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Experiment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Experiment* New() const final {
    return CreateMaybeMessage<Experiment>(nullptr);
  }

  Experiment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Experiment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Experiment& from);
  void MergeFrom(const Experiment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Experiment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Experiment";
  }
  protected:
  explicit Experiment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageModelListFieldNumber = 4,
    kHashFieldNumber = 2,
    kTitleFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .StageModel stageModelList = 4;
  int stagemodellist_size() const;
  private:
  int _internal_stagemodellist_size() const;
  public:
  void clear_stagemodellist();
  ::StageModel* mutable_stagemodellist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StageModel >*
      mutable_stagemodellist();
  private:
  const ::StageModel& _internal_stagemodellist(int index) const;
  ::StageModel* _internal_add_stagemodellist();
  public:
  const ::StageModel& stagemodellist(int index) const;
  ::StageModel* add_stagemodellist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StageModel >&
      stagemodellist() const;

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Experiment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StageModel > stagemodellist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fabric

// int32 id = 1;
inline void Fabric::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fabric::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fabric::id() const {
  // @@protoc_insertion_point(field_get:Fabric.id)
  return _internal_id();
}
inline void Fabric::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Fabric::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Fabric.id)
}

// string hash = 2;
inline void Fabric::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& Fabric::hash() const {
  // @@protoc_insertion_point(field_get:Fabric.hash)
  return _internal_hash();
}
inline void Fabric::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Fabric.hash)
}
inline std::string* Fabric::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Fabric.hash)
  return _internal_mutable_hash();
}
inline const std::string& Fabric::_internal_hash() const {
  return hash_.Get();
}
inline void Fabric::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Fabric::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Fabric.hash)
}
inline void Fabric::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Fabric.hash)
}
inline void Fabric::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Fabric.hash)
}
inline std::string* Fabric::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Fabric::release_hash() {
  // @@protoc_insertion_point(field_release:Fabric.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fabric::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Fabric.hash)
}

// float ref = 3;
inline void Fabric::clear_ref() {
  ref_ = 0;
}
inline float Fabric::_internal_ref() const {
  return ref_;
}
inline float Fabric::ref() const {
  // @@protoc_insertion_point(field_get:Fabric.ref)
  return _internal_ref();
}
inline void Fabric::_internal_set_ref(float value) {
  
  ref_ = value;
}
inline void Fabric::set_ref(float value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:Fabric.ref)
}

// float rf = 4;
inline void Fabric::clear_rf() {
  rf_ = 0;
}
inline float Fabric::_internal_rf() const {
  return rf_;
}
inline float Fabric::rf() const {
  // @@protoc_insertion_point(field_get:Fabric.rf)
  return _internal_rf();
}
inline void Fabric::_internal_set_rf(float value) {
  
  rf_ = value;
}
inline void Fabric::set_rf(float value) {
  _internal_set_rf(value);
  // @@protoc_insertion_point(field_set:Fabric.rf)
}

// int32 ip = 5;
inline void Fabric::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fabric::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fabric::ip() const {
  // @@protoc_insertion_point(field_get:Fabric.ip)
  return _internal_ip();
}
inline void Fabric::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
}
inline void Fabric::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Fabric.ip)
}

// float density = 6;
inline void Fabric::clear_density() {
  density_ = 0;
}
inline float Fabric::_internal_density() const {
  return density_;
}
inline float Fabric::density() const {
  // @@protoc_insertion_point(field_get:Fabric.density)
  return _internal_density();
}
inline void Fabric::_internal_set_density(float value) {
  
  density_ = value;
}
inline void Fabric::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:Fabric.density)
}

// float thinckness = 7;
inline void Fabric::clear_thinckness() {
  thinckness_ = 0;
}
inline float Fabric::_internal_thinckness() const {
  return thinckness_;
}
inline float Fabric::thinckness() const {
  // @@protoc_insertion_point(field_get:Fabric.thinckness)
  return _internal_thinckness();
}
inline void Fabric::_internal_set_thinckness(float value) {
  
  thinckness_ = value;
}
inline void Fabric::set_thinckness(float value) {
  _internal_set_thinckness(value);
  // @@protoc_insertion_point(field_set:Fabric.thinckness)
}

// -------------------------------------------------------------------

// Clothing

// int32 id = 1;
inline void Clothing::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Clothing::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Clothing::id() const {
  // @@protoc_insertion_point(field_get:Clothing.id)
  return _internal_id();
}
inline void Clothing::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Clothing::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Clothing.id)
}

// string hash = 2;
inline void Clothing::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& Clothing::hash() const {
  // @@protoc_insertion_point(field_get:Clothing.hash)
  return _internal_hash();
}
inline void Clothing::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Clothing.hash)
}
inline std::string* Clothing::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Clothing.hash)
  return _internal_mutable_hash();
}
inline const std::string& Clothing::_internal_hash() const {
  return hash_.Get();
}
inline void Clothing::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Clothing::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Clothing.hash)
}
inline void Clothing::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Clothing.hash)
}
inline void Clothing::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Clothing.hash)
}
inline std::string* Clothing::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Clothing::release_hash() {
  // @@protoc_insertion_point(field_release:Clothing.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Clothing::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Clothing.hash)
}

// int32 covering = 3;
inline void Clothing::clear_covering() {
  covering_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Clothing::_internal_covering() const {
  return covering_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Clothing::covering() const {
  // @@protoc_insertion_point(field_get:Clothing.covering)
  return _internal_covering();
}
inline void Clothing::_internal_set_covering(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  covering_ = value;
}
inline void Clothing::set_covering(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_covering(value);
  // @@protoc_insertion_point(field_set:Clothing.covering)
}

// repeated .Fabric fabric = 4;
inline int Clothing::_internal_fabric_size() const {
  return fabric_.size();
}
inline int Clothing::fabric_size() const {
  return _internal_fabric_size();
}
inline void Clothing::clear_fabric() {
  fabric_.Clear();
}
inline ::Fabric* Clothing::mutable_fabric(int index) {
  // @@protoc_insertion_point(field_mutable:Clothing.fabric)
  return fabric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Fabric >*
Clothing::mutable_fabric() {
  // @@protoc_insertion_point(field_mutable_list:Clothing.fabric)
  return &fabric_;
}
inline const ::Fabric& Clothing::_internal_fabric(int index) const {
  return fabric_.Get(index);
}
inline const ::Fabric& Clothing::fabric(int index) const {
  // @@protoc_insertion_point(field_get:Clothing.fabric)
  return _internal_fabric(index);
}
inline ::Fabric* Clothing::_internal_add_fabric() {
  return fabric_.Add();
}
inline ::Fabric* Clothing::add_fabric() {
  // @@protoc_insertion_point(field_add:Clothing.fabric)
  return _internal_add_fabric();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Fabric >&
Clothing::fabric() const {
  // @@protoc_insertion_point(field_list:Clothing.fabric)
  return fabric_;
}

// -------------------------------------------------------------------

// Environment

// int32 id = 1;
inline void Environment::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::id() const {
  // @@protoc_insertion_point(field_get:Environment.id)
  return _internal_id();
}
inline void Environment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Environment::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Environment.id)
}

// string hash = 2;
inline void Environment::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& Environment::hash() const {
  // @@protoc_insertion_point(field_get:Environment.hash)
  return _internal_hash();
}
inline void Environment::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Environment.hash)
}
inline std::string* Environment::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Environment.hash)
  return _internal_mutable_hash();
}
inline const std::string& Environment::_internal_hash() const {
  return hash_.Get();
}
inline void Environment::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Environment::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Environment.hash)
}
inline void Environment::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Environment.hash)
}
inline void Environment::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Environment.hash)
}
inline std::string* Environment::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Environment::release_hash() {
  // @@protoc_insertion_point(field_release:Environment.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Environment::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Environment.hash)
}

// string typeEnv = 3;
inline void Environment::clear_typeenv() {
  typeenv_.ClearToEmpty();
}
inline const std::string& Environment::typeenv() const {
  // @@protoc_insertion_point(field_get:Environment.typeEnv)
  return _internal_typeenv();
}
inline void Environment::set_typeenv(const std::string& value) {
  _internal_set_typeenv(value);
  // @@protoc_insertion_point(field_set:Environment.typeEnv)
}
inline std::string* Environment::mutable_typeenv() {
  // @@protoc_insertion_point(field_mutable:Environment.typeEnv)
  return _internal_mutable_typeenv();
}
inline const std::string& Environment::_internal_typeenv() const {
  return typeenv_.Get();
}
inline void Environment::_internal_set_typeenv(const std::string& value) {
  
  typeenv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Environment::set_typeenv(std::string&& value) {
  
  typeenv_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Environment.typeEnv)
}
inline void Environment::set_typeenv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  typeenv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Environment.typeEnv)
}
inline void Environment::set_typeenv(const char* value,
    size_t size) {
  
  typeenv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Environment.typeEnv)
}
inline std::string* Environment::_internal_mutable_typeenv() {
  
  return typeenv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Environment::release_typeenv() {
  // @@protoc_insertion_point(field_release:Environment.typeEnv)
  return typeenv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Environment::set_allocated_typeenv(std::string* typeenv) {
  if (typeenv != nullptr) {
    
  } else {
    
  }
  typeenv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), typeenv,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Environment.typeEnv)
}

// int32 temperatureInCelsious = 4;
inline void Environment::clear_temperatureincelsious() {
  temperatureincelsious_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::_internal_temperatureincelsious() const {
  return temperatureincelsious_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::temperatureincelsious() const {
  // @@protoc_insertion_point(field_get:Environment.temperatureInCelsious)
  return _internal_temperatureincelsious();
}
inline void Environment::_internal_set_temperatureincelsious(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temperatureincelsious_ = value;
}
inline void Environment::set_temperatureincelsious(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temperatureincelsious(value);
  // @@protoc_insertion_point(field_set:Environment.temperatureInCelsious)
}

// int32 humidityInPercent = 5;
inline void Environment::clear_humidityinpercent() {
  humidityinpercent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::_internal_humidityinpercent() const {
  return humidityinpercent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::humidityinpercent() const {
  // @@protoc_insertion_point(field_get:Environment.humidityInPercent)
  return _internal_humidityinpercent();
}
inline void Environment::_internal_set_humidityinpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  humidityinpercent_ = value;
}
inline void Environment::set_humidityinpercent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_humidityinpercent(value);
  // @@protoc_insertion_point(field_set:Environment.humidityInPercent)
}

// int32 windVelocity = 6;
inline void Environment::clear_windvelocity() {
  windvelocity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::_internal_windvelocity() const {
  return windvelocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Environment::windvelocity() const {
  // @@protoc_insertion_point(field_get:Environment.windVelocity)
  return _internal_windvelocity();
}
inline void Environment::_internal_set_windvelocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  windvelocity_ = value;
}
inline void Environment::set_windvelocity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_windvelocity(value);
  // @@protoc_insertion_point(field_set:Environment.windVelocity)
}

// -------------------------------------------------------------------

// BodyPart

// repeated .Environment Environment = 1;
inline int BodyPart::_internal_environment_size() const {
  return environment_.size();
}
inline int BodyPart::environment_size() const {
  return _internal_environment_size();
}
inline void BodyPart::clear_environment() {
  environment_.Clear();
}
inline ::Environment* BodyPart::mutable_environment(int index) {
  // @@protoc_insertion_point(field_mutable:BodyPart.Environment)
  return environment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Environment >*
BodyPart::mutable_environment() {
  // @@protoc_insertion_point(field_mutable_list:BodyPart.Environment)
  return &environment_;
}
inline const ::Environment& BodyPart::_internal_environment(int index) const {
  return environment_.Get(index);
}
inline const ::Environment& BodyPart::environment(int index) const {
  // @@protoc_insertion_point(field_get:BodyPart.Environment)
  return _internal_environment(index);
}
inline ::Environment* BodyPart::_internal_add_environment() {
  return environment_.Add();
}
inline ::Environment* BodyPart::add_environment() {
  // @@protoc_insertion_point(field_add:BodyPart.Environment)
  return _internal_add_environment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Environment >&
BodyPart::environment() const {
  // @@protoc_insertion_point(field_list:BodyPart.Environment)
  return environment_;
}

// repeated .Clothing Clothing = 2;
inline int BodyPart::_internal_clothing_size() const {
  return clothing_.size();
}
inline int BodyPart::clothing_size() const {
  return _internal_clothing_size();
}
inline void BodyPart::clear_clothing() {
  clothing_.Clear();
}
inline ::Clothing* BodyPart::mutable_clothing(int index) {
  // @@protoc_insertion_point(field_mutable:BodyPart.Clothing)
  return clothing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clothing >*
BodyPart::mutable_clothing() {
  // @@protoc_insertion_point(field_mutable_list:BodyPart.Clothing)
  return &clothing_;
}
inline const ::Clothing& BodyPart::_internal_clothing(int index) const {
  return clothing_.Get(index);
}
inline const ::Clothing& BodyPart::clothing(int index) const {
  // @@protoc_insertion_point(field_get:BodyPart.Clothing)
  return _internal_clothing(index);
}
inline ::Clothing* BodyPart::_internal_add_clothing() {
  return clothing_.Add();
}
inline ::Clothing* BodyPart::add_clothing() {
  // @@protoc_insertion_point(field_add:BodyPart.Clothing)
  return _internal_add_clothing();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Clothing >&
BodyPart::clothing() const {
  // @@protoc_insertion_point(field_list:BodyPart.Clothing)
  return clothing_;
}

// -------------------------------------------------------------------

// BodyItem

// int32 id = 1;
inline void BodyItem::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyItem::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyItem::id() const {
  // @@protoc_insertion_point(field_get:BodyItem.id)
  return _internal_id();
}
inline void BodyItem::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BodyItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BodyItem.id)
}

// string hash = 2;
inline void BodyItem::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& BodyItem::hash() const {
  // @@protoc_insertion_point(field_get:BodyItem.hash)
  return _internal_hash();
}
inline void BodyItem::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:BodyItem.hash)
}
inline std::string* BodyItem::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:BodyItem.hash)
  return _internal_mutable_hash();
}
inline const std::string& BodyItem::_internal_hash() const {
  return hash_.Get();
}
inline void BodyItem::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BodyItem::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BodyItem.hash)
}
inline void BodyItem::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BodyItem.hash)
}
inline void BodyItem::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BodyItem.hash)
}
inline std::string* BodyItem::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BodyItem::release_hash() {
  // @@protoc_insertion_point(field_release:BodyItem.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BodyItem::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BodyItem.hash)
}

// repeated .BodyPart head = 3;
inline int BodyItem::_internal_head_size() const {
  return head_.size();
}
inline int BodyItem::head_size() const {
  return _internal_head_size();
}
inline void BodyItem::clear_head() {
  head_.Clear();
}
inline ::BodyPart* BodyItem::mutable_head(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.head)
  return head_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_head() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.head)
  return &head_;
}
inline const ::BodyPart& BodyItem::_internal_head(int index) const {
  return head_.Get(index);
}
inline const ::BodyPart& BodyItem::head(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.head)
  return _internal_head(index);
}
inline ::BodyPart* BodyItem::_internal_add_head() {
  return head_.Add();
}
inline ::BodyPart* BodyItem::add_head() {
  // @@protoc_insertion_point(field_add:BodyItem.head)
  return _internal_add_head();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::head() const {
  // @@protoc_insertion_point(field_list:BodyItem.head)
  return head_;
}

// repeated .BodyPart torso = 4;
inline int BodyItem::_internal_torso_size() const {
  return torso_.size();
}
inline int BodyItem::torso_size() const {
  return _internal_torso_size();
}
inline void BodyItem::clear_torso() {
  torso_.Clear();
}
inline ::BodyPart* BodyItem::mutable_torso(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.torso)
  return torso_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_torso() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.torso)
  return &torso_;
}
inline const ::BodyPart& BodyItem::_internal_torso(int index) const {
  return torso_.Get(index);
}
inline const ::BodyPart& BodyItem::torso(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.torso)
  return _internal_torso(index);
}
inline ::BodyPart* BodyItem::_internal_add_torso() {
  return torso_.Add();
}
inline ::BodyPart* BodyItem::add_torso() {
  // @@protoc_insertion_point(field_add:BodyItem.torso)
  return _internal_add_torso();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::torso() const {
  // @@protoc_insertion_point(field_list:BodyItem.torso)
  return torso_;
}

// repeated .BodyPart armRight = 5;
inline int BodyItem::_internal_armright_size() const {
  return armright_.size();
}
inline int BodyItem::armright_size() const {
  return _internal_armright_size();
}
inline void BodyItem::clear_armright() {
  armright_.Clear();
}
inline ::BodyPart* BodyItem::mutable_armright(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.armRight)
  return armright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_armright() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.armRight)
  return &armright_;
}
inline const ::BodyPart& BodyItem::_internal_armright(int index) const {
  return armright_.Get(index);
}
inline const ::BodyPart& BodyItem::armright(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.armRight)
  return _internal_armright(index);
}
inline ::BodyPart* BodyItem::_internal_add_armright() {
  return armright_.Add();
}
inline ::BodyPart* BodyItem::add_armright() {
  // @@protoc_insertion_point(field_add:BodyItem.armRight)
  return _internal_add_armright();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::armright() const {
  // @@protoc_insertion_point(field_list:BodyItem.armRight)
  return armright_;
}

// repeated .BodyPart armLeft = 6;
inline int BodyItem::_internal_armleft_size() const {
  return armleft_.size();
}
inline int BodyItem::armleft_size() const {
  return _internal_armleft_size();
}
inline void BodyItem::clear_armleft() {
  armleft_.Clear();
}
inline ::BodyPart* BodyItem::mutable_armleft(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.armLeft)
  return armleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_armleft() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.armLeft)
  return &armleft_;
}
inline const ::BodyPart& BodyItem::_internal_armleft(int index) const {
  return armleft_.Get(index);
}
inline const ::BodyPart& BodyItem::armleft(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.armLeft)
  return _internal_armleft(index);
}
inline ::BodyPart* BodyItem::_internal_add_armleft() {
  return armleft_.Add();
}
inline ::BodyPart* BodyItem::add_armleft() {
  // @@protoc_insertion_point(field_add:BodyItem.armLeft)
  return _internal_add_armleft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::armleft() const {
  // @@protoc_insertion_point(field_list:BodyItem.armLeft)
  return armleft_;
}

// repeated .BodyPart foreamRight = 7;
inline int BodyItem::_internal_foreamright_size() const {
  return foreamright_.size();
}
inline int BodyItem::foreamright_size() const {
  return _internal_foreamright_size();
}
inline void BodyItem::clear_foreamright() {
  foreamright_.Clear();
}
inline ::BodyPart* BodyItem::mutable_foreamright(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.foreamRight)
  return foreamright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_foreamright() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.foreamRight)
  return &foreamright_;
}
inline const ::BodyPart& BodyItem::_internal_foreamright(int index) const {
  return foreamright_.Get(index);
}
inline const ::BodyPart& BodyItem::foreamright(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.foreamRight)
  return _internal_foreamright(index);
}
inline ::BodyPart* BodyItem::_internal_add_foreamright() {
  return foreamright_.Add();
}
inline ::BodyPart* BodyItem::add_foreamright() {
  // @@protoc_insertion_point(field_add:BodyItem.foreamRight)
  return _internal_add_foreamright();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::foreamright() const {
  // @@protoc_insertion_point(field_list:BodyItem.foreamRight)
  return foreamright_;
}

// repeated .BodyPart foreamLeft = 8;
inline int BodyItem::_internal_foreamleft_size() const {
  return foreamleft_.size();
}
inline int BodyItem::foreamleft_size() const {
  return _internal_foreamleft_size();
}
inline void BodyItem::clear_foreamleft() {
  foreamleft_.Clear();
}
inline ::BodyPart* BodyItem::mutable_foreamleft(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.foreamLeft)
  return foreamleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_foreamleft() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.foreamLeft)
  return &foreamleft_;
}
inline const ::BodyPart& BodyItem::_internal_foreamleft(int index) const {
  return foreamleft_.Get(index);
}
inline const ::BodyPart& BodyItem::foreamleft(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.foreamLeft)
  return _internal_foreamleft(index);
}
inline ::BodyPart* BodyItem::_internal_add_foreamleft() {
  return foreamleft_.Add();
}
inline ::BodyPart* BodyItem::add_foreamleft() {
  // @@protoc_insertion_point(field_add:BodyItem.foreamLeft)
  return _internal_add_foreamleft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::foreamleft() const {
  // @@protoc_insertion_point(field_list:BodyItem.foreamLeft)
  return foreamleft_;
}

// repeated .BodyPart handRight = 9;
inline int BodyItem::_internal_handright_size() const {
  return handright_.size();
}
inline int BodyItem::handright_size() const {
  return _internal_handright_size();
}
inline void BodyItem::clear_handright() {
  handright_.Clear();
}
inline ::BodyPart* BodyItem::mutable_handright(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.handRight)
  return handright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_handright() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.handRight)
  return &handright_;
}
inline const ::BodyPart& BodyItem::_internal_handright(int index) const {
  return handright_.Get(index);
}
inline const ::BodyPart& BodyItem::handright(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.handRight)
  return _internal_handright(index);
}
inline ::BodyPart* BodyItem::_internal_add_handright() {
  return handright_.Add();
}
inline ::BodyPart* BodyItem::add_handright() {
  // @@protoc_insertion_point(field_add:BodyItem.handRight)
  return _internal_add_handright();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::handright() const {
  // @@protoc_insertion_point(field_list:BodyItem.handRight)
  return handright_;
}

// repeated .BodyPart handLeft = 10;
inline int BodyItem::_internal_handleft_size() const {
  return handleft_.size();
}
inline int BodyItem::handleft_size() const {
  return _internal_handleft_size();
}
inline void BodyItem::clear_handleft() {
  handleft_.Clear();
}
inline ::BodyPart* BodyItem::mutable_handleft(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.handLeft)
  return handleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_handleft() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.handLeft)
  return &handleft_;
}
inline const ::BodyPart& BodyItem::_internal_handleft(int index) const {
  return handleft_.Get(index);
}
inline const ::BodyPart& BodyItem::handleft(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.handLeft)
  return _internal_handleft(index);
}
inline ::BodyPart* BodyItem::_internal_add_handleft() {
  return handleft_.Add();
}
inline ::BodyPart* BodyItem::add_handleft() {
  // @@protoc_insertion_point(field_add:BodyItem.handLeft)
  return _internal_add_handleft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::handleft() const {
  // @@protoc_insertion_point(field_list:BodyItem.handLeft)
  return handleft_;
}

// repeated .BodyPart thingRight = 11;
inline int BodyItem::_internal_thingright_size() const {
  return thingright_.size();
}
inline int BodyItem::thingright_size() const {
  return _internal_thingright_size();
}
inline void BodyItem::clear_thingright() {
  thingright_.Clear();
}
inline ::BodyPart* BodyItem::mutable_thingright(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.thingRight)
  return thingright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_thingright() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.thingRight)
  return &thingright_;
}
inline const ::BodyPart& BodyItem::_internal_thingright(int index) const {
  return thingright_.Get(index);
}
inline const ::BodyPart& BodyItem::thingright(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.thingRight)
  return _internal_thingright(index);
}
inline ::BodyPart* BodyItem::_internal_add_thingright() {
  return thingright_.Add();
}
inline ::BodyPart* BodyItem::add_thingright() {
  // @@protoc_insertion_point(field_add:BodyItem.thingRight)
  return _internal_add_thingright();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::thingright() const {
  // @@protoc_insertion_point(field_list:BodyItem.thingRight)
  return thingright_;
}

// repeated .BodyPart thingLeft = 12;
inline int BodyItem::_internal_thingleft_size() const {
  return thingleft_.size();
}
inline int BodyItem::thingleft_size() const {
  return _internal_thingleft_size();
}
inline void BodyItem::clear_thingleft() {
  thingleft_.Clear();
}
inline ::BodyPart* BodyItem::mutable_thingleft(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.thingLeft)
  return thingleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_thingleft() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.thingLeft)
  return &thingleft_;
}
inline const ::BodyPart& BodyItem::_internal_thingleft(int index) const {
  return thingleft_.Get(index);
}
inline const ::BodyPart& BodyItem::thingleft(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.thingLeft)
  return _internal_thingleft(index);
}
inline ::BodyPart* BodyItem::_internal_add_thingleft() {
  return thingleft_.Add();
}
inline ::BodyPart* BodyItem::add_thingleft() {
  // @@protoc_insertion_point(field_add:BodyItem.thingLeft)
  return _internal_add_thingleft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::thingleft() const {
  // @@protoc_insertion_point(field_list:BodyItem.thingLeft)
  return thingleft_;
}

// repeated .BodyPart calfRight = 13;
inline int BodyItem::_internal_calfright_size() const {
  return calfright_.size();
}
inline int BodyItem::calfright_size() const {
  return _internal_calfright_size();
}
inline void BodyItem::clear_calfright() {
  calfright_.Clear();
}
inline ::BodyPart* BodyItem::mutable_calfright(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.calfRight)
  return calfright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_calfright() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.calfRight)
  return &calfright_;
}
inline const ::BodyPart& BodyItem::_internal_calfright(int index) const {
  return calfright_.Get(index);
}
inline const ::BodyPart& BodyItem::calfright(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.calfRight)
  return _internal_calfright(index);
}
inline ::BodyPart* BodyItem::_internal_add_calfright() {
  return calfright_.Add();
}
inline ::BodyPart* BodyItem::add_calfright() {
  // @@protoc_insertion_point(field_add:BodyItem.calfRight)
  return _internal_add_calfright();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::calfright() const {
  // @@protoc_insertion_point(field_list:BodyItem.calfRight)
  return calfright_;
}

// repeated .BodyPart calfLeft = 14;
inline int BodyItem::_internal_calfleft_size() const {
  return calfleft_.size();
}
inline int BodyItem::calfleft_size() const {
  return _internal_calfleft_size();
}
inline void BodyItem::clear_calfleft() {
  calfleft_.Clear();
}
inline ::BodyPart* BodyItem::mutable_calfleft(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.calfLeft)
  return calfleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_calfleft() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.calfLeft)
  return &calfleft_;
}
inline const ::BodyPart& BodyItem::_internal_calfleft(int index) const {
  return calfleft_.Get(index);
}
inline const ::BodyPart& BodyItem::calfleft(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.calfLeft)
  return _internal_calfleft(index);
}
inline ::BodyPart* BodyItem::_internal_add_calfleft() {
  return calfleft_.Add();
}
inline ::BodyPart* BodyItem::add_calfleft() {
  // @@protoc_insertion_point(field_add:BodyItem.calfLeft)
  return _internal_add_calfleft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::calfleft() const {
  // @@protoc_insertion_point(field_list:BodyItem.calfLeft)
  return calfleft_;
}

// repeated .BodyPart footRight = 15;
inline int BodyItem::_internal_footright_size() const {
  return footright_.size();
}
inline int BodyItem::footright_size() const {
  return _internal_footright_size();
}
inline void BodyItem::clear_footright() {
  footright_.Clear();
}
inline ::BodyPart* BodyItem::mutable_footright(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.footRight)
  return footright_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_footright() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.footRight)
  return &footright_;
}
inline const ::BodyPart& BodyItem::_internal_footright(int index) const {
  return footright_.Get(index);
}
inline const ::BodyPart& BodyItem::footright(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.footRight)
  return _internal_footright(index);
}
inline ::BodyPart* BodyItem::_internal_add_footright() {
  return footright_.Add();
}
inline ::BodyPart* BodyItem::add_footright() {
  // @@protoc_insertion_point(field_add:BodyItem.footRight)
  return _internal_add_footright();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::footright() const {
  // @@protoc_insertion_point(field_list:BodyItem.footRight)
  return footright_;
}

// repeated .BodyPart footLeft = 16;
inline int BodyItem::_internal_footleft_size() const {
  return footleft_.size();
}
inline int BodyItem::footleft_size() const {
  return _internal_footleft_size();
}
inline void BodyItem::clear_footleft() {
  footleft_.Clear();
}
inline ::BodyPart* BodyItem::mutable_footleft(int index) {
  // @@protoc_insertion_point(field_mutable:BodyItem.footLeft)
  return footleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >*
BodyItem::mutable_footleft() {
  // @@protoc_insertion_point(field_mutable_list:BodyItem.footLeft)
  return &footleft_;
}
inline const ::BodyPart& BodyItem::_internal_footleft(int index) const {
  return footleft_.Get(index);
}
inline const ::BodyPart& BodyItem::footleft(int index) const {
  // @@protoc_insertion_point(field_get:BodyItem.footLeft)
  return _internal_footleft(index);
}
inline ::BodyPart* BodyItem::_internal_add_footleft() {
  return footleft_.Add();
}
inline ::BodyPart* BodyItem::add_footleft() {
  // @@protoc_insertion_point(field_add:BodyItem.footLeft)
  return _internal_add_footleft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyPart >&
BodyItem::footleft() const {
  // @@protoc_insertion_point(field_list:BodyItem.footLeft)
  return footleft_;
}

// -------------------------------------------------------------------

// Activity

// int32 id = 1;
inline void Activity::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::id() const {
  // @@protoc_insertion_point(field_get:Activity.id)
  return _internal_id();
}
inline void Activity::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Activity::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Activity.id)
}

// string hash = 2;
inline void Activity::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& Activity::hash() const {
  // @@protoc_insertion_point(field_get:Activity.hash)
  return _internal_hash();
}
inline void Activity::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Activity.hash)
}
inline std::string* Activity::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Activity.hash)
  return _internal_mutable_hash();
}
inline const std::string& Activity::_internal_hash() const {
  return hash_.Get();
}
inline void Activity::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Activity::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Activity.hash)
}
inline void Activity::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Activity.hash)
}
inline void Activity::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Activity.hash)
}
inline std::string* Activity::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Activity::release_hash() {
  // @@protoc_insertion_point(field_release:Activity.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activity::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Activity.hash)
}

// int32 intensityInWatt = 3;
inline void Activity::clear_intensityinwatt() {
  intensityinwatt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::_internal_intensityinwatt() const {
  return intensityinwatt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::intensityinwatt() const {
  // @@protoc_insertion_point(field_get:Activity.intensityInWatt)
  return _internal_intensityinwatt();
}
inline void Activity::_internal_set_intensityinwatt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intensityinwatt_ = value;
}
inline void Activity::set_intensityinwatt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intensityinwatt(value);
  // @@protoc_insertion_point(field_set:Activity.intensityInWatt)
}

// int32 durationInMinutes = 4;
inline void Activity::clear_durationinminutes() {
  durationinminutes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::_internal_durationinminutes() const {
  return durationinminutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::durationinminutes() const {
  // @@protoc_insertion_point(field_get:Activity.durationInMinutes)
  return _internal_durationinminutes();
}
inline void Activity::_internal_set_durationinminutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  durationinminutes_ = value;
}
inline void Activity::set_durationinminutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_durationinminutes(value);
  // @@protoc_insertion_point(field_set:Activity.durationInMinutes)
}

// string typeActivity = 5;
inline void Activity::clear_typeactivity() {
  typeactivity_.ClearToEmpty();
}
inline const std::string& Activity::typeactivity() const {
  // @@protoc_insertion_point(field_get:Activity.typeActivity)
  return _internal_typeactivity();
}
inline void Activity::set_typeactivity(const std::string& value) {
  _internal_set_typeactivity(value);
  // @@protoc_insertion_point(field_set:Activity.typeActivity)
}
inline std::string* Activity::mutable_typeactivity() {
  // @@protoc_insertion_point(field_mutable:Activity.typeActivity)
  return _internal_mutable_typeactivity();
}
inline const std::string& Activity::_internal_typeactivity() const {
  return typeactivity_.Get();
}
inline void Activity::_internal_set_typeactivity(const std::string& value) {
  
  typeactivity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Activity::set_typeactivity(std::string&& value) {
  
  typeactivity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Activity.typeActivity)
}
inline void Activity::set_typeactivity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  typeactivity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Activity.typeActivity)
}
inline void Activity::set_typeactivity(const char* value,
    size_t size) {
  
  typeactivity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Activity.typeActivity)
}
inline std::string* Activity::_internal_mutable_typeactivity() {
  
  return typeactivity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Activity::release_typeactivity() {
  // @@protoc_insertion_point(field_release:Activity.typeActivity)
  return typeactivity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activity::set_allocated_typeactivity(std::string* typeactivity) {
  if (typeactivity != nullptr) {
    
  } else {
    
  }
  typeactivity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), typeactivity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Activity.typeActivity)
}

// -------------------------------------------------------------------

// StageModel

// int32 id = 1;
inline void StageModel::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StageModel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StageModel::id() const {
  // @@protoc_insertion_point(field_get:StageModel.id)
  return _internal_id();
}
inline void StageModel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void StageModel::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:StageModel.id)
}

// string hash = 2;
inline void StageModel::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& StageModel::hash() const {
  // @@protoc_insertion_point(field_get:StageModel.hash)
  return _internal_hash();
}
inline void StageModel::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:StageModel.hash)
}
inline std::string* StageModel::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:StageModel.hash)
  return _internal_mutable_hash();
}
inline const std::string& StageModel::_internal_hash() const {
  return hash_.Get();
}
inline void StageModel::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StageModel::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StageModel.hash)
}
inline void StageModel::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StageModel.hash)
}
inline void StageModel::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StageModel.hash)
}
inline std::string* StageModel::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StageModel::release_hash() {
  // @@protoc_insertion_point(field_release:StageModel.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StageModel::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StageModel.hash)
}

// string title = 3;
inline void StageModel::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& StageModel::title() const {
  // @@protoc_insertion_point(field_get:StageModel.title)
  return _internal_title();
}
inline void StageModel::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:StageModel.title)
}
inline std::string* StageModel::mutable_title() {
  // @@protoc_insertion_point(field_mutable:StageModel.title)
  return _internal_mutable_title();
}
inline const std::string& StageModel::_internal_title() const {
  return title_.Get();
}
inline void StageModel::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StageModel::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StageModel.title)
}
inline void StageModel::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:StageModel.title)
}
inline void StageModel::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StageModel.title)
}
inline std::string* StageModel::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StageModel::release_title() {
  // @@protoc_insertion_point(field_release:StageModel.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StageModel::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StageModel.title)
}

// repeated .Activity activity = 4;
inline int StageModel::_internal_activity_size() const {
  return activity_.size();
}
inline int StageModel::activity_size() const {
  return _internal_activity_size();
}
inline void StageModel::clear_activity() {
  activity_.Clear();
}
inline ::Activity* StageModel::mutable_activity(int index) {
  // @@protoc_insertion_point(field_mutable:StageModel.activity)
  return activity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Activity >*
StageModel::mutable_activity() {
  // @@protoc_insertion_point(field_mutable_list:StageModel.activity)
  return &activity_;
}
inline const ::Activity& StageModel::_internal_activity(int index) const {
  return activity_.Get(index);
}
inline const ::Activity& StageModel::activity(int index) const {
  // @@protoc_insertion_point(field_get:StageModel.activity)
  return _internal_activity(index);
}
inline ::Activity* StageModel::_internal_add_activity() {
  return activity_.Add();
}
inline ::Activity* StageModel::add_activity() {
  // @@protoc_insertion_point(field_add:StageModel.activity)
  return _internal_add_activity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Activity >&
StageModel::activity() const {
  // @@protoc_insertion_point(field_list:StageModel.activity)
  return activity_;
}

// repeated .BodyItem body = 5;
inline int StageModel::_internal_body_size() const {
  return body_.size();
}
inline int StageModel::body_size() const {
  return _internal_body_size();
}
inline void StageModel::clear_body() {
  body_.Clear();
}
inline ::BodyItem* StageModel::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:StageModel.body)
  return body_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyItem >*
StageModel::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:StageModel.body)
  return &body_;
}
inline const ::BodyItem& StageModel::_internal_body(int index) const {
  return body_.Get(index);
}
inline const ::BodyItem& StageModel::body(int index) const {
  // @@protoc_insertion_point(field_get:StageModel.body)
  return _internal_body(index);
}
inline ::BodyItem* StageModel::_internal_add_body() {
  return body_.Add();
}
inline ::BodyItem* StageModel::add_body() {
  // @@protoc_insertion_point(field_add:StageModel.body)
  return _internal_add_body();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BodyItem >&
StageModel::body() const {
  // @@protoc_insertion_point(field_list:StageModel.body)
  return body_;
}

// -------------------------------------------------------------------

// Experiment

// int32 id = 1;
inline void Experiment::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Experiment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Experiment::id() const {
  // @@protoc_insertion_point(field_get:Experiment.id)
  return _internal_id();
}
inline void Experiment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Experiment::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Experiment.id)
}

// string hash = 2;
inline void Experiment::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& Experiment::hash() const {
  // @@protoc_insertion_point(field_get:Experiment.hash)
  return _internal_hash();
}
inline void Experiment::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Experiment.hash)
}
inline std::string* Experiment::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Experiment.hash)
  return _internal_mutable_hash();
}
inline const std::string& Experiment::_internal_hash() const {
  return hash_.Get();
}
inline void Experiment::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Experiment::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Experiment.hash)
}
inline void Experiment::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Experiment.hash)
}
inline void Experiment::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Experiment.hash)
}
inline std::string* Experiment::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Experiment::release_hash() {
  // @@protoc_insertion_point(field_release:Experiment.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Experiment::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Experiment.hash)
}

// string title = 3;
inline void Experiment::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Experiment::title() const {
  // @@protoc_insertion_point(field_get:Experiment.title)
  return _internal_title();
}
inline void Experiment::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:Experiment.title)
}
inline std::string* Experiment::mutable_title() {
  // @@protoc_insertion_point(field_mutable:Experiment.title)
  return _internal_mutable_title();
}
inline const std::string& Experiment::_internal_title() const {
  return title_.Get();
}
inline void Experiment::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Experiment::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Experiment.title)
}
inline void Experiment::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Experiment.title)
}
inline void Experiment::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Experiment.title)
}
inline std::string* Experiment::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Experiment::release_title() {
  // @@protoc_insertion_point(field_release:Experiment.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Experiment::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Experiment.title)
}

// repeated .StageModel stageModelList = 4;
inline int Experiment::_internal_stagemodellist_size() const {
  return stagemodellist_.size();
}
inline int Experiment::stagemodellist_size() const {
  return _internal_stagemodellist_size();
}
inline void Experiment::clear_stagemodellist() {
  stagemodellist_.Clear();
}
inline ::StageModel* Experiment::mutable_stagemodellist(int index) {
  // @@protoc_insertion_point(field_mutable:Experiment.stageModelList)
  return stagemodellist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StageModel >*
Experiment::mutable_stagemodellist() {
  // @@protoc_insertion_point(field_mutable_list:Experiment.stageModelList)
  return &stagemodellist_;
}
inline const ::StageModel& Experiment::_internal_stagemodellist(int index) const {
  return stagemodellist_.Get(index);
}
inline const ::StageModel& Experiment::stagemodellist(int index) const {
  // @@protoc_insertion_point(field_get:Experiment.stageModelList)
  return _internal_stagemodellist(index);
}
inline ::StageModel* Experiment::_internal_add_stagemodellist() {
  return stagemodellist_.Add();
}
inline ::StageModel* Experiment::add_stagemodellist() {
  // @@protoc_insertion_point(field_add:Experiment.stageModelList)
  return _internal_add_stagemodellist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StageModel >&
Experiment::stagemodellist() const {
  // @@protoc_insertion_point(field_list:Experiment.stageModelList)
  return stagemodellist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2eproto
